<?php
class fraisWidget extends CWidget
{
	
	private $_owner;
	
		
	/**
	 * Constructor.
	 * @param CBaseController $owner owner/creator of this widget. It could be either a widget or a controller.
	 */
	public function __construct($owner=null)
	{
		$this->imports();
		
		parent::__construct($owner);
	}
	
	
	
	public function setOwner($owner)
	{
		$this->_owner = $owner;
	}
	
	
	public function cleanUpForSerialization()
	{
		//this will remove the owner object to avoid serializing it (no need);
		//set owner to false not to null , null will set the default controller , check the __construct code for cwidget
		parent::__construct(false);
	}
	
	
	/**
	 * Returns the owner/creator of this widget.
	 * @return CBaseController owner/creator of this widget. It could be either a widget or a controller.
	 */
	public function getOwner()
	{
		return $this->_owner;
	}
	
	protected function imports()
	{
		
	} 
	
	
	// function __wakeup()
	// {
		// $this->imports();
	// }
// 	
	// function __sleep()
	// {
		// $ref = (new ReflectionObject($this));
		// $rwprop = $ref->getProperties(ReflectionProperty::IS_PUBLIC);
// 		
		// $wprop = array();
		// foreach($rwprop as $prop)
		// {
			// $wprop[] = $prop->name;
		// }
// 		
		// $wprop[] = '_e';
// 		
		// return $wprop;
	// }
	
	
	public function getWidgetActionURL($action)
	{
		return  ($action. "." . $this->actionPrefix);
	}
	
	
		/**
	 * Creates a widget and executes it.
	 * @param string $className the widget class name or class in dot syntax (e.g. application.widgets.MyWidget)
	 * @param array $properties list of initial property values for the widget (Property Name => Property Value)
	 * @param boolean $captureOutput whether to capture the output of the widget. If true, the method will capture
	 * and return the output generated by the widget. If false, the output will be directly sent for display
	 * and the widget object will be returned. This parameter is available since version 1.1.2.
	 * @return mixed the widget instance when $captureOutput is false, or the widget output when $captureOutput is true.
	 */
	public function widget($className,$properties=array(),$captureOutput=false)
	{
		return Yii::app()->getController()->widget($className,$properties,$captureOutput);
	}
	
	
	public function render($view,$data=null,$return=false,$processOutput=false)
	{
		if(($viewFile=$this->getViewFile($view))!==false)
		{
			$output=$this->renderFile($viewFile,$data,true);
			if($processOutput)
				$output=Yii::app()->getController()->processOutput($output);
			
			if($return)
				return $output;
			else
				echo $output;
		}
		else
			throw new CException(Yii::t('yii','{widget} cannot find the view "{view}".',
				array('{widget}'=>get_class($this), '{view}'=>$view)));
	}
	
}